public static void main(String[] args) throws IOException {
		String contents = new String(Files.readAllBytes(Paths.get("a.txt")), StandardCharsets.UTF_8);
		List<String> wordlist = Arrays.asList(contents.split("\\PL+"));

		Optional<String> optionalValue = wordlist.stream().filter(s -> s.contains("fred")).findFirst();
		System.out.println(optionalValue.orElse("No word") + "contains fred");

		Optional<String> optionalString = Optional.empty();
		//没有则返回N/A
		String result = optionalString.orElse("N/A");
		System.out.println("result:" + result);
		result = optionalString.orElseGet(() -> Locale.getDefault().getDisplayName());
		System.out.println(result);
		try {
			result = optionalString.orElseThrow(IllegalStateException::new);
			System.out.println(result);
		} catch (Throwable e) {

		}
		System.out.println();
		optionalValue = wordlist.stream().filter(s -> s.contains("red")).findFirst();
		optionalValue.ifPresent(s->System.out.println(s+" contains red"));
		Set<String> results = new HashSet<>();
		optionalValue.ifPresent(results::add);
		Optional<Boolean> added = optionalValue.map(results::add);
		System.out.println(added);
		
		System.out.println(inverse(4.0).flatMap(OptionalTest::squareRoot));
		System.out.println(inverse(-1.0).flatMap(OptionalTest::squareRoot));
		System.out.println(inverse(0.0).flatMap(OptionalTest::squareRoot));
		System.out.println();
		//有值就执行OptionalTest后的函数
		Optional<Double> result2 = Optional.of(-4.0).flatMap(OptionalTest::inverse).flatMap(OptionalTest::squareRoot);
		System.out.println(result2);
	}

	private static Optional<Double> inverse(double d) {
		return d==0?Optional.empty():Optional.of(1/d);
	}
	private static Optional<Double> squareRoot(double d) {
		return d<0?Optional.empty():Optional.of(Math.sqrt(d));
	}
